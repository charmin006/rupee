"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/surrealdb.ts":
/*!**************************!*\
  !*** ./lib/surrealdb.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   surrealDB: function() { return /* binding */ surrealDB; }\n/* harmony export */ });\n/* harmony import */ var surrealdb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! surrealdb */ \"(app-pages-browser)/./node_modules/surrealdb/dist/index.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// SurrealDB configuration\nconst SURREAL_CONFIG = {\n    url: \"wss://proud-mountain-06c6jke0n1vbn801agrm8g9sj4.aws-euw1.surreal.cloud/rpc\" || 0,\n    namespace: \"charmee\" || 0,\n    database: \"ruppee\" || 0,\n    // For local development\n    username: process.env.NEXT_PUBLIC_SURREAL_USERNAME || \"root\",\n    password: process.env.NEXT_PUBLIC_SURREAL_PASSWORD || \"root\",\n    // For Surreal Cloud (token-based auth)\n    token: \"eyJhbGciOiJQUzI1NiIsImtpZCI6IjFkNmViYjAyLWM5ZjEtNDg4Zi1iNjhjLWNlMzMzMzU4YzgyOCIsInR5cCI6IkpXVCJ9.eyJhYyI6ImNsb3VkIiwiYXVkIjoiMDZjNmprZTBuMXZibjgwMWFncm04ZzlzajQiLCJleHAiOjE3NTQxMjM1NDYsImlhdCI6MTc1NDEyMzQ4NiwicmwiOlsiT3duZXIiXX0.gxlfCBeWWUd4QZETJObI1S3N0qbL3_Kf1EhEFvrVZoZ2CZdu3lKiS7dSFR9mPupiI9huRuo2uoyd-vS14UMiL1rGWrBUxczB9yunRSnJPkIlsCVj47L2DYV5m6lVbguSZE9kagbYUHuO655wtH5bV96Or4z3TJE2YM5DcdPBzcrDFUUz2tamNbTd_ikOWtMbhgHdWNyaZR2QE16AQsPf3G99IZGNpM9SSmDzd0GNOpQOMTcp_-C4r4O042YvfCOYGtkb2Tpg6fKJ_ezRDuO8HASanB6I1aBKkUI1x005XTWTAak-QVvI2EL92MZkMj9HIKC1ZPfdyBOLGxpprK7JjA\" || 0\n};\nclass SurrealDBService {\n    static getInstance() {\n        if (!SurrealDBService.instance) {\n            SurrealDBService.instance = new SurrealDBService();\n        }\n        return SurrealDBService.instance;\n    }\n    async connect() {\n        if (this.isConnected) return;\n        try {\n            await this.db.connect(SURREAL_CONFIG.url);\n            // Authenticate based on environment (Cloud vs Local)\n            if (SURREAL_CONFIG.token) {\n                // Surreal Cloud: Use token authentication\n                await this.db.authenticate(SURREAL_CONFIG.token);\n            } else {\n                // Local development: Use username/password\n                await this.db.signin({\n                    username: SURREAL_CONFIG.username,\n                    password: SURREAL_CONFIG.password\n                });\n            }\n            // Use the namespace and database (create if they don't exist)\n            await this.db.use({\n                ns: SURREAL_CONFIG.namespace,\n                db: SURREAL_CONFIG.database\n            });\n            this.isConnected = true;\n            console.log(\"✅ Connected to SurrealDB\");\n            // Initialize database schema\n            await this.initializeSchema();\n            // Fix any existing users with NONE values\n            try {\n                await this.fixAllUsers();\n                console.log(\"✅ Fixed existing users with NONE values\");\n            } catch (error) {\n                console.warn(\"⚠️ Could not fix existing users:\", error);\n            }\n            // Fix any existing records with string dates\n            try {\n                await this.fixDateFieldsSimple();\n                console.log(\"✅ Fixed existing records with string dates\");\n            } catch (error) {\n                console.warn(\"⚠️ Could not fix existing date fields:\", error);\n            }\n            // Fix any existing records with record references instead of string IDs\n            try {\n                await this.fixRecordReferences();\n                console.log(\"✅ Fixed existing records with record references\");\n            } catch (error) {\n                console.warn(\"⚠️ Could not fix existing record references:\", error);\n            }\n            // Fix the specific error mentioned in the user query\n            try {\n                await this.fixSpecificRecordError();\n                console.log(\"✅ Fixed specific record error\");\n            } catch (error) {\n                console.warn(\"⚠️ Could not fix specific record error:\", error);\n            }\n            // Additional comprehensive fix for any remaining record references\n            try {\n                await this.fixAllRecordReferences();\n                console.log(\"✅ Fixed all remaining record references\");\n            } catch (error) {\n                console.warn(\"⚠️ Could not fix all record references:\", error);\n            }\n        } catch (error) {\n            console.error(\"❌ Failed to connect to SurrealDB:\", error);\n            throw error;\n        }\n    }\n    async initializeSchema() {\n        try {\n            console.log(\"\\uD83D\\uDD0D Initializing schema...\");\n            // Wrap in try-catch to handle \"table already exists\" errors gracefully\n            try {\n                await this.db.query(\"\\n          USE NS rupee DB finance;\\n          \\n          -- Users table\\n          DEFINE TABLE users SCHEMAFULL;\\n          DEFINE FIELD email ON users TYPE string ASSERT $value != NONE;\\n          DEFINE FIELD name ON users TYPE string;\\n          DEFINE FIELD preferences ON users TYPE object DEFAULT {\\n            currency: '₹',\\n            theme: 'light',\\n            notifications: true,\\n            defaultPaymentMethod: 'cash',\\n            budgetLimits: [],\\n            alertSettings: {\\n              overspendingAlerts: true,\\n              budgetLimitAlerts: true,\\n              savingsGoalAlerts: true,\\n              weeklyInsights: true,\\n              emailNotifications: false,\\n              pushNotifications: true\\n            },\\n            gamificationEnabled: true,\\n            autoBackupEnabled: false,\\n            cloudSyncEnabled: false,\\n            receiptScanningEnabled: false\\n          };\\n          DEFINE FIELD profiles ON users TYPE array DEFAULT [];\\n          DEFINE FIELD activeProfileId ON users TYPE string DEFAULT '';\\n          DEFINE FIELD securitySettings ON users TYPE object DEFAULT {\\n            pinEnabled: false,\\n            biometricEnabled: false,\\n            autoLockTimeout: 5,\\n            requireAuthForExport: true,\\n            requireAuthForSettings: false\\n          };\\n          DEFINE FIELD achievements ON users TYPE array DEFAULT [];\\n          DEFINE FIELD streaks ON users TYPE object DEFAULT {\\n            currentStreak: 0,\\n            longestStreak: 0,\\n            noSpendDays: 0,\\n            totalNoSpendDays: 0,\\n            currentNoSpendStreak: 0,\\n            longestNoSpendStreak: 0\\n          };\\n          DEFINE FIELD createdAt ON users TYPE datetime DEFAULT time::now();\\n          DEFINE FIELD updatedAt ON users TYPE datetime DEFAULT time::now();\\n          \\n          -- Expenses table\\n          DEFINE TABLE expenses SCHEMAFULL;\\n          DEFINE FIELD userId ON expenses TYPE string;\\n          DEFINE FIELD amount ON expenses TYPE number;\\n          DEFINE FIELD description ON expenses TYPE string;\\n          DEFINE FIELD categoryId ON expenses TYPE string;\\n          DEFINE FIELD date ON expenses TYPE datetime;\\n          DEFINE FIELD paymentMethod ON expenses TYPE string;\\n          DEFINE FIELD createdAt ON expenses TYPE datetime DEFAULT time::now();\\n          DEFINE FIELD updatedAt ON expenses TYPE datetime DEFAULT time::now();\\n          \\n          -- Incomes table\\n          DEFINE TABLE incomes SCHEMAFULL;\\n          DEFINE FIELD userId ON incomes TYPE string;\\n          DEFINE FIELD amount ON incomes TYPE number;\\n          DEFINE FIELD source ON incomes TYPE string;\\n          DEFINE FIELD date ON incomes TYPE datetime;\\n          DEFINE FIELD createdAt ON incomes TYPE datetime DEFAULT time::now();\\n          DEFINE FIELD updatedAt ON incomes TYPE datetime DEFAULT time::now();\\n          \\n          -- Categories table\\n          DEFINE TABLE categories SCHEMAFULL;\\n          DEFINE FIELD userId ON categories TYPE string;\\n          DEFINE FIELD name ON categories TYPE string;\\n          DEFINE FIELD color ON categories TYPE string;\\n          DEFINE FIELD icon ON categories TYPE string;\\n          DEFINE FIELD isCustom ON categories TYPE bool DEFAULT true;\\n          DEFINE FIELD createdAt ON categories TYPE datetime DEFAULT time::now();\\n          DEFINE FIELD updatedAt ON categories TYPE datetime DEFAULT time::now();\\n          \\n          -- Savings goals table\\n          DEFINE TABLE savings_goals SCHEMAFULL;\\n          DEFINE FIELD userId ON savings_goals TYPE string;\\n          DEFINE FIELD name ON savings_goals TYPE string;\\n          DEFINE FIELD targetAmount ON savings_goals TYPE number;\\n          DEFINE FIELD currentAmount ON savings_goals TYPE number DEFAULT 0;\\n          DEFINE FIELD targetDate ON savings_goals TYPE datetime;\\n          DEFINE FIELD createdAt ON savings_goals TYPE datetime DEFAULT time::now();\\n          DEFINE FIELD updatedAt ON savings_goals TYPE datetime DEFAULT time::now();\\n          \\n          -- Budget limits table\\n          DEFINE TABLE budget_limits SCHEMAFULL;\\n          DEFINE FIELD userId ON budget_limits TYPE string;\\n          DEFINE FIELD categoryId ON budget_limits TYPE string;\\n          DEFINE FIELD amount ON budget_limits TYPE number;\\n          DEFINE FIELD period ON budget_limits TYPE string;\\n          DEFINE FIELD isActive ON budget_limits TYPE bool DEFAULT true;\\n          DEFINE FIELD createdAt ON budget_limits TYPE datetime DEFAULT time::now();\\n          DEFINE FIELD updatedAt ON budget_limits TYPE datetime DEFAULT time::now();\\n          \\n          -- Insights table\\n          DEFINE TABLE insights SCHEMAFULL;\\n          DEFINE FIELD userId ON insights TYPE string;\\n          DEFINE FIELD type ON insights TYPE string;\\n          DEFINE FIELD title ON insights TYPE string;\\n          DEFINE FIELD description ON insights TYPE string;\\n          DEFINE FIELD data ON insights TYPE object;\\n          DEFINE FIELD isRead ON insights TYPE bool DEFAULT false;\\n          DEFINE FIELD createdAt ON insights TYPE datetime DEFAULT time::now();\\n          \\n          -- Alerts table\\n          DEFINE TABLE alerts SCHEMAFULL;\\n          DEFINE FIELD userId ON alerts TYPE string;\\n          DEFINE FIELD type ON alerts TYPE string;\\n          DEFINE FIELD title ON alerts TYPE string;\\n          DEFINE FIELD message ON alerts TYPE string;\\n          DEFINE FIELD severity ON alerts TYPE string;\\n          DEFINE FIELD isRead ON alerts TYPE bool DEFAULT false;\\n          DEFINE FIELD createdAt ON alerts TYPE datetime DEFAULT time::now();\\n          \\n          -- Recurring expenses table\\n          DEFINE TABLE recurring_expenses SCHEMAFULL;\\n          DEFINE FIELD userId ON recurring_expenses TYPE string;\\n          DEFINE FIELD amount ON recurring_expenses TYPE number;\\n          DEFINE FIELD description ON recurring_expenses TYPE string;\\n          DEFINE FIELD categoryId ON recurring_expenses TYPE string;\\n          DEFINE FIELD frequency ON recurring_expenses TYPE string;\\n          DEFINE FIELD nextDueDate ON recurring_expenses TYPE datetime;\\n          DEFINE FIELD isActive ON recurring_expenses TYPE bool DEFAULT true;\\n          DEFINE FIELD createdAt ON recurring_expenses TYPE datetime DEFAULT time::now();\\n          DEFINE FIELD updatedAt ON recurring_expenses TYPE datetime DEFAULT time::now();\\n          \\n          -- Profiles table\\n          DEFINE TABLE profiles SCHEMAFULL;\\n          DEFINE FIELD userId ON profiles TYPE string;\\n          DEFINE FIELD name ON profiles TYPE string;\\n          DEFINE FIELD role ON profiles TYPE string;\\n          DEFINE FIELD permissions ON profiles TYPE object;\\n          DEFINE FIELD createdAt ON profiles TYPE datetime DEFAULT time::now();\\n          DEFINE FIELD updatedAt ON profiles TYPE datetime DEFAULT time::now();\\n          \\n          -- Achievements table\\n          DEFINE TABLE achievements SCHEMAFULL;\\n          DEFINE FIELD userId ON achievements TYPE string;\\n          DEFINE FIELD name ON achievements TYPE string;\\n          DEFINE FIELD description ON achievements TYPE string;\\n          DEFINE FIELD icon ON achievements TYPE string;\\n          DEFINE FIELD progress ON achievements TYPE number DEFAULT 0;\\n          DEFINE FIELD maxProgress ON achievements TYPE number;\\n          DEFINE FIELD isUnlocked ON achievements TYPE bool DEFAULT false;\\n          DEFINE FIELD unlockedAt ON achievements TYPE datetime;\\n          DEFINE FIELD createdAt ON achievements TYPE datetime DEFAULT time::now();\\n          \\n          -- Backup history table\\n          DEFINE TABLE backup_history SCHEMAFULL;\\n          DEFINE FIELD userId ON backup_history TYPE string;\\n          DEFINE FIELD type ON backup_history TYPE string;\\n          DEFINE FIELD status ON backup_history TYPE string;\\n          DEFINE FIELD fileSize ON backup_history TYPE number;\\n          DEFINE FIELD createdAt ON backup_history TYPE datetime DEFAULT time::now();\\n        \");\n                console.log(\"✅ Database schema initialized\");\n            } catch (error) {\n                // Handle \"table already exists\" error gracefully\n                if (error.message && error.message.includes(\"already exists\")) {\n                    console.log(\"ℹ️ Schema already exists, skipping initialization\");\n                } else {\n                    console.error(\"❌ Failed to initialize schema:\", error);\n                    throw error;\n                }\n            }\n        } catch (error) {\n            console.error(\"❌ Error in initializeSchema:\", error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        if (this.isConnected) {\n            await this.db.close();\n            this.isConnected = false;\n            console.log(\"\\uD83D\\uDD0C Disconnected from SurrealDB\");\n        }\n    }\n    // User operations\n    async createUser(userData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        // Ensure required fields have default values\n        const defaultUserData = {\n            preferences: {\n                currency: \"₹\",\n                theme: \"light\",\n                notifications: true,\n                defaultPaymentMethod: \"cash\",\n                budgetLimits: [],\n                alertSettings: {\n                    overspendingAlerts: true,\n                    budgetLimitAlerts: true,\n                    savingsGoalAlerts: true,\n                    weeklyInsights: true,\n                    emailNotifications: false,\n                    pushNotifications: true\n                },\n                gamificationEnabled: true,\n                autoBackupEnabled: false,\n                cloudSyncEnabled: false,\n                receiptScanningEnabled: false\n            },\n            profiles: [],\n            activeProfileId: \"\",\n            securitySettings: {\n                pinEnabled: false,\n                biometricEnabled: false,\n                autoLockTimeout: 5,\n                requireAuthForExport: true,\n                requireAuthForSettings: false\n            },\n            achievements: [],\n            streaks: {\n                currentStreak: 0,\n                longestStreak: 0,\n                noSpendDays: 0,\n                totalNoSpendDays: 0,\n                currentNoSpendStreak: 0,\n                longestNoSpendStreak: 0\n            },\n            ...userData\n        };\n        const result = await this.db.query(\"USE NS rupee DB finance; CREATE users CONTENT $userData\", {\n            userData: defaultUserData\n        });\n        const user = ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n        // Return user with ID as string, not record reference\n        if (user && user.id) {\n            if (typeof user.id === \"object\" && user.id.id) {\n                // Handle _RecordId object\n                user.id = user.id.id;\n            } else if (typeof user.id === \"string\" && user.id.includes(\":\")) {\n                // Handle string record reference\n                user.id = user.id.split(\":\")[1] || user.id;\n            }\n        }\n        return user;\n    }\n    async getUser(userId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; SELECT * FROM users WHERE id = $userId\", {\n            userId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async updateUser(userId, userData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; UPDATE users SET * = $userData WHERE id = $userId\", {\n            userId,\n            userData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async deleteUser(userId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; DELETE users WHERE id = $userId\", {\n            userId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async fixUserFields(userId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        // Fix users with NONE values for required fields\n        const result = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      UPDATE users SET \\n        achievements = [] WHERE id = $userId AND achievements = NONE;\\n      UPDATE users SET \\n        streaks = {\\n          currentStreak: 0,\\n          longestStreak: 0,\\n          noSpendDays: 0,\\n          totalNoSpendDays: 0,\\n          currentNoSpendStreak: 0,\\n          longestNoSpendStreak: 0\\n        } WHERE id = $userId AND streaks = NONE;\\n      UPDATE users SET \\n        profiles = [] WHERE id = $userId AND profiles = NONE;\\n      UPDATE users SET \\n        activeProfileId = '' WHERE id = $userId AND activeProfileId = NONE;\\n      UPDATE users SET \\n        securitySettings = {\\n          pinEnabled: false,\\n          biometricEnabled: false,\\n          autoLockTimeout: 5,\\n          requireAuthForExport: true,\\n          requireAuthForSettings: false\\n        } WHERE id = $userId AND securitySettings = NONE;\\n    \", {\n            userId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async fixAllUsers() {\n        var _result_;\n        await this.connect();\n        // Fix all users with NONE values for required fields\n        const result = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      UPDATE users SET \\n        achievements = [] WHERE achievements = NONE;\\n      UPDATE users SET \\n        streaks = {\\n          currentStreak: 0,\\n          longestStreak: 0,\\n          noSpendDays: 0,\\n          totalNoSpendDays: 0,\\n          currentNoSpendStreak: 0,\\n          longestNoSpendStreak: 0\\n        } WHERE streaks = NONE;\\n      UPDATE users SET \\n        profiles = [] WHERE profiles = NONE;\\n      UPDATE users SET \\n        activeProfileId = '' WHERE activeProfileId = NONE;\\n      UPDATE users SET \\n        securitySettings = {\\n          pinEnabled: false,\\n          biometricEnabled: false,\\n          autoLockTimeout: 5,\\n          requireAuthForExport: true,\\n          requireAuthForSettings: false\\n        } WHERE securitySettings = NONE;\\n    \");\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async fixDateFields() {\n        var _result_;\n        await this.connect();\n        // Fix expenses with string dates by converting them to datetime\n        const result = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      UPDATE expenses SET \\n        date = time::parse(date) WHERE type::of(date) = 'string';\\n      UPDATE incomes SET \\n        date = time::parse(date) WHERE type::of(date) = 'string';\\n      UPDATE savings_goals SET \\n        targetDate = time::parse(targetDate) WHERE type::of(targetDate) = 'string';\\n      UPDATE recurring_expenses SET \\n        nextDueDate = time::parse(nextDueDate) WHERE type::of(nextDueDate) = 'string';\\n    \");\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async fixDateFieldsSimple() {\n        await this.connect();\n        // Get all expenses and check if they have string dates\n        const expenses = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      SELECT * FROM expenses;\\n    \");\n        if (expenses[1] && expenses[1].length > 0) {\n            for (const expense of expenses[1]){\n                // Check if the date is a string (not a datetime object)\n                if (typeof expense.date === \"string\" && expense.date.includes(\"T\")) {\n                    try {\n                        await this.db.query(\"\\n              USE NS rupee DB finance;\\n              UPDATE \".concat(expense.id, \" SET date = time::parse('\").concat(expense.date, \"');\\n            \"));\n                    } catch (error) {\n                        console.warn(\"Could not fix date for expense \".concat(expense.id, \":\"), error);\n                    }\n                }\n            }\n        }\n        // Get all incomes and check if they have string dates\n        const incomes = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      SELECT * FROM incomes;\\n    \");\n        if (incomes[1] && incomes[1].length > 0) {\n            for (const income of incomes[1]){\n                // Check if the date is a string (not a datetime object)\n                if (typeof income.date === \"string\" && income.date.includes(\"T\")) {\n                    try {\n                        await this.db.query(\"\\n              USE NS rupee DB finance;\\n              UPDATE \".concat(income.id, \" SET date = time::parse('\").concat(income.date, \"');\\n            \"));\n                    } catch (error) {\n                        console.warn(\"Could not fix date for income \".concat(income.id, \":\"), error);\n                    }\n                }\n            }\n        }\n        return {\n            success: true\n        };\n    }\n    async fixRecordReferences() {\n        await this.connect();\n        // Fix expenses with record references instead of string IDs\n        const expenses = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      SELECT * FROM expenses;\\n    \");\n        if (expenses[1] && expenses[1].length > 0) {\n            for (const expense of expenses[1]){\n                // Check if userId is a record reference or _RecordId object\n                if (expense.userId) {\n                    let userId = expense.userId;\n                    let needsFix = false;\n                    if (typeof expense.userId === \"object\" && expense.userId.id) {\n                        // Handle _RecordId object\n                        userId = expense.userId.id;\n                        needsFix = true;\n                    } else if (typeof expense.userId === \"string\" && expense.userId.includes(\":\")) {\n                        // Handle string record reference\n                        userId = expense.userId.split(\":\")[1];\n                        needsFix = true;\n                    }\n                    if (needsFix) {\n                        try {\n                            await this.db.query(\"\\n                USE NS rupee DB finance;\\n                UPDATE \".concat(expense.id, \" SET userId = '\").concat(userId, \"';\\n              \"));\n                            console.log(\"Fixed userId for expense \".concat(expense.id, \": \").concat(expense.userId, \" -> \").concat(userId));\n                        } catch (error) {\n                            console.warn(\"Could not fix userId for expense \".concat(expense.id, \":\"), error);\n                        }\n                    }\n                }\n                // Also check categoryId if it's a record reference\n                if (expense.categoryId && typeof expense.categoryId === \"string\" && expense.categoryId.includes(\":\")) {\n                    try {\n                        const categoryId = expense.categoryId.split(\":\")[1];\n                        await this.db.query(\"\\n              USE NS rupee DB finance;\\n              UPDATE \".concat(expense.id, \" SET categoryId = '\").concat(categoryId, \"';\\n            \"));\n                        console.log(\"Fixed categoryId for expense \".concat(expense.id, \": \").concat(expense.categoryId, \" -> \").concat(categoryId));\n                    } catch (error) {\n                        console.warn(\"Could not fix categoryId for expense \".concat(expense.id, \":\"), error);\n                    }\n                }\n            }\n        }\n        // Fix incomes with record references instead of string IDs\n        const incomes = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      SELECT * FROM incomes;\\n    \");\n        if (incomes[1] && incomes[1].length > 0) {\n            for (const income of incomes[1]){\n                // Check if userId is a record reference or _RecordId object\n                if (income.userId) {\n                    let userId = income.userId;\n                    let needsFix = false;\n                    if (typeof income.userId === \"object\" && income.userId.id) {\n                        // Handle _RecordId object\n                        userId = income.userId.id;\n                        needsFix = true;\n                    } else if (typeof income.userId === \"string\" && income.userId.includes(\":\")) {\n                        // Handle string record reference\n                        userId = income.userId.split(\":\")[1];\n                        needsFix = true;\n                    }\n                    if (needsFix) {\n                        try {\n                            await this.db.query(\"\\n                USE NS rupee DB finance;\\n                UPDATE \".concat(income.id, \" SET userId = '\").concat(userId, \"';\\n              \"));\n                            console.log(\"Fixed userId for income \".concat(income.id, \": \").concat(income.userId, \" -> \").concat(userId));\n                        } catch (error) {\n                            console.warn(\"Could not fix userId for income \".concat(income.id, \":\"), error);\n                        }\n                    }\n                }\n            }\n        }\n        // Fix categories with record references\n        const categories = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      SELECT * FROM categories;\\n    \");\n        if (categories[1] && categories[1].length > 0) {\n            for (const category of categories[1]){\n                // Check if userId is a record reference (contains ':')\n                if (category.userId && typeof category.userId === \"string\" && category.userId.includes(\":\")) {\n                    try {\n                        const userId = category.userId.split(\":\")[1];\n                        await this.db.query(\"\\n              USE NS rupee DB finance;\\n              UPDATE \".concat(category.id, \" SET userId = '\").concat(userId, \"';\\n            \"));\n                        console.log(\"Fixed userId for category \".concat(category.id, \": \").concat(category.userId, \" -> \").concat(userId));\n                    } catch (error) {\n                        console.warn(\"Could not fix userId for category \".concat(category.id, \":\"), error);\n                    }\n                }\n            }\n        }\n        // Fix other tables with userId references\n        const tables = [\n            \"savings_goals\",\n            \"budget_limits\",\n            \"insights\",\n            \"alerts\",\n            \"recurring_expenses\",\n            \"profiles\",\n            \"achievements\",\n            \"backup_history\"\n        ];\n        for (const table of tables){\n            try {\n                const records = await this.db.query(\"\\n          USE NS rupee DB finance;\\n          SELECT * FROM \".concat(table, \";\\n        \"));\n                if (records[1] && records[1].length > 0) {\n                    for (const record of records[1]){\n                        if (record.userId && typeof record.userId === \"string\" && record.userId.includes(\":\")) {\n                            try {\n                                const userId = record.userId.split(\":\")[1];\n                                await this.db.query(\"\\n                  USE NS rupee DB finance;\\n                  UPDATE \".concat(record.id, \" SET userId = '\").concat(userId, \"';\\n                \"));\n                                console.log(\"Fixed userId for \".concat(table, \" \").concat(record.id, \": \").concat(record.userId, \" -> \").concat(userId));\n                            } catch (error) {\n                                console.warn(\"Could not fix userId for \".concat(table, \" \").concat(record.id, \":\"), error);\n                            }\n                        }\n                    }\n                }\n            } catch (error) {\n                console.warn(\"Could not process table \".concat(table, \":\"), error);\n            }\n        }\n        return {\n            success: true\n        };\n    }\n    // Comprehensive method to fix all record references\n    async fixAllRecordReferences() {\n        await this.connect();\n        try {\n            // Get all expenses and fix any record references\n            const expenses = await this.db.query(\"\\n        USE NS rupee DB finance;\\n        SELECT * FROM expenses;\\n      \");\n            let fixedCount = 0;\n            if (expenses[1] && expenses[1].length > 0) {\n                for (const expense of expenses[1]){\n                    if (expense.userId && typeof expense.userId === \"string\" && expense.userId.includes(\":\")) {\n                        try {\n                            const userId = expense.userId.split(\":\")[1];\n                            await this.db.query(\"\\n                USE NS rupee DB finance;\\n                UPDATE \".concat(expense.id, \" SET userId = '\").concat(userId, \"';\\n              \"));\n                            console.log(\"Fixed userId for expense \".concat(expense.id, \": \").concat(expense.userId, \" -> \").concat(userId));\n                            fixedCount++;\n                        } catch (error) {\n                            console.warn(\"Could not fix userId for expense \".concat(expense.id, \":\"), error);\n                        }\n                    }\n                    if (expense.categoryId && typeof expense.categoryId === \"string\" && expense.categoryId.includes(\":\")) {\n                        try {\n                            const categoryId = expense.categoryId.split(\":\")[1];\n                            await this.db.query(\"\\n                USE NS rupee DB finance;\\n                UPDATE \".concat(expense.id, \" SET categoryId = '\").concat(categoryId, \"';\\n              \"));\n                            console.log(\"Fixed categoryId for expense \".concat(expense.id, \": \").concat(expense.categoryId, \" -> \").concat(categoryId));\n                            fixedCount++;\n                        } catch (error) {\n                            console.warn(\"Could not fix categoryId for expense \".concat(expense.id, \":\"), error);\n                        }\n                    }\n                }\n            }\n            // Get all incomes and fix any record references\n            const incomes = await this.db.query(\"\\n        USE NS rupee DB finance;\\n        SELECT * FROM incomes;\\n      \");\n            if (incomes[1] && incomes[1].length > 0) {\n                for (const income of incomes[1]){\n                    if (income.userId && typeof income.userId === \"string\" && income.userId.includes(\":\")) {\n                        try {\n                            const userId = income.userId.split(\":\")[1];\n                            await this.db.query(\"\\n                USE NS rupee DB finance;\\n                UPDATE \".concat(income.id, \" SET userId = '\").concat(userId, \"';\\n              \"));\n                            console.log(\"Fixed userId for income \".concat(income.id, \": \").concat(income.userId, \" -> \").concat(userId));\n                            fixedCount++;\n                        } catch (error) {\n                            console.warn(\"Could not fix userId for income \".concat(income.id, \":\"), error);\n                        }\n                    }\n                }\n            }\n            console.log(\"Fixed \".concat(fixedCount, \" record references\"));\n            return {\n                success: true,\n                fixedCount\n            };\n        } catch (error) {\n            console.error(\"Error fixing all record references:\", error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    // New method to fix the specific error mentioned\n    async fixSpecificRecordError() {\n        await this.connect();\n        try {\n            // Find the specific expense mentioned in the error\n            const result = await this.db.query(\"\\n        USE NS rupee DB finance;\\n        SELECT * FROM expenses WHERE id = 'expenses:2dahp1q8e9cer4n5s8ze';\\n      \");\n            if (result[1] && result[1].length > 0) {\n                const expense = result[1][0];\n                if (expense.userId && typeof expense.userId === \"string\" && expense.userId.includes(\":\")) {\n                    const userId = expense.userId.split(\":\")[1];\n                    await this.db.query(\"\\n            USE NS rupee DB finance;\\n            UPDATE expenses:2dahp1q8e9cer4n5s8ze SET userId = '\".concat(userId, \"';\\n          \"));\n                    console.log(\"Fixed specific expense userId: \".concat(expense.userId, \" -> \").concat(userId));\n                    return {\n                        success: true,\n                        fixed: true\n                    };\n                }\n            }\n            // Also check for the new error mentioned\n            const result2 = await this.db.query(\"\\n        USE NS rupee DB finance;\\n        SELECT * FROM expenses WHERE id = 'expenses:ce9obee44h94a18tq6m9';\\n      \");\n            if (result2[1] && result2[1].length > 0) {\n                const expense = result2[1][0];\n                if (expense.userId && typeof expense.userId === \"string\" && expense.userId.includes(\":\")) {\n                    const userId = expense.userId.split(\":\")[1];\n                    await this.db.query(\"\\n            USE NS rupee DB finance;\\n            UPDATE expenses:ce9obee44h94a18tq6m9 SET userId = '\".concat(userId, \"';\\n          \"));\n                    console.log(\"Fixed specific expense userId: \".concat(expense.userId, \" -> \").concat(userId));\n                    return {\n                        success: true,\n                        fixed: true\n                    };\n                }\n            }\n            // Check for the latest error mentioned\n            const result3 = await this.db.query(\"\\n        USE NS rupee DB finance;\\n        SELECT * FROM expenses WHERE id = 'expenses:5t7s208me18ur6hzf4jp';\\n      \");\n            if (result3[1] && result3[1].length > 0) {\n                const expense = result3[1][0];\n                if (expense.userId && typeof expense.userId === \"string\" && expense.userId.includes(\":\")) {\n                    const userId = expense.userId.split(\":\")[1];\n                    await this.db.query(\"\\n            USE NS rupee DB finance;\\n            UPDATE expenses:5t7s208me18ur6hzf4jp SET userId = '\".concat(userId, \"';\\n          \"));\n                    console.log(\"Fixed specific expense userId: \".concat(expense.userId, \" -> \").concat(userId));\n                    return {\n                        success: true,\n                        fixed: true\n                    };\n                }\n            }\n            return {\n                success: true,\n                fixed: false\n            };\n        } catch (error) {\n            console.error(\"Error fixing specific record:\", error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    // Expense operations\n    async createExpense(expenseData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        // Ensure userId is a string, not a record reference\n        const cleanExpenseData = {\n            ...expenseData\n        };\n        if (cleanExpenseData.userId) {\n            if (typeof cleanExpenseData.userId === \"object\" && cleanExpenseData.userId.id) {\n                // Handle _RecordId object\n                cleanExpenseData.userId = cleanExpenseData.userId.id;\n            } else if (typeof cleanExpenseData.userId === \"string\" && cleanExpenseData.userId.includes(\":\")) {\n                // Handle string record reference\n                cleanExpenseData.userId = cleanExpenseData.userId.split(\":\")[1];\n            }\n        }\n        // Ensure categoryId is a string, not a record reference\n        if (cleanExpenseData.categoryId && typeof cleanExpenseData.categoryId === \"string\" && cleanExpenseData.categoryId.includes(\":\")) {\n            cleanExpenseData.categoryId = cleanExpenseData.categoryId.split(\":\")[1];\n        }\n        const result = await this.db.query(\"USE NS rupee DB finance; CREATE expenses CONTENT $expenseData\", {\n            expenseData: cleanExpenseData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async getExpenses(userId) {\n        var _result_;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; SELECT * FROM expenses WHERE userId = $userId\", {\n            userId\n        });\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async updateExpense(expenseId, expenseData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; UPDATE expenses SET * = $expenseData WHERE id = $expenseId\", {\n            expenseId,\n            expenseData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async deleteExpense(expenseId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; DELETE expenses WHERE id = $expenseId\", {\n            expenseId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    // Income operations\n    async createIncome(incomeData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        // Ensure userId is a string, not a record reference\n        const cleanIncomeData = {\n            ...incomeData\n        };\n        if (cleanIncomeData.userId) {\n            if (typeof cleanIncomeData.userId === \"object\" && cleanIncomeData.userId.id) {\n                // Handle _RecordId object\n                cleanIncomeData.userId = cleanIncomeData.userId.id;\n            } else if (typeof cleanIncomeData.userId === \"string\" && cleanIncomeData.userId.includes(\":\")) {\n                // Handle string record reference\n                cleanIncomeData.userId = cleanIncomeData.userId.split(\":\")[1];\n            }\n        }\n        const result = await this.db.query(\"USE NS rupee DB finance; CREATE incomes CONTENT $incomeData\", {\n            incomeData: cleanIncomeData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async getIncomes(userId) {\n        var _result_;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; SELECT * FROM incomes WHERE userId = $userId\", {\n            userId\n        });\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async updateIncome(incomeId, incomeData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; UPDATE incomes SET * = $incomeData WHERE id = $incomeId\", {\n            incomeId,\n            incomeData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async deleteIncome(incomeId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; DELETE incomes WHERE id = $incomeId\", {\n            incomeId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    // Category operations\n    async createCategory(categoryData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; CREATE categories CONTENT $categoryData\", {\n            categoryData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async getCategories(userId) {\n        var _result_;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; SELECT * FROM categories WHERE userId = $userId\", {\n            userId\n        });\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async updateCategory(categoryId, categoryData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; UPDATE categories SET * = $categoryData WHERE id = $categoryId\", {\n            categoryId,\n            categoryData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async deleteCategory(categoryId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; DELETE categories WHERE id = $categoryId\", {\n            categoryId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    // Savings goals operations\n    async createSavingsGoal(goalData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; CREATE savings_goals CONTENT $goalData\", {\n            goalData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async getSavingsGoals(userId) {\n        var _result_;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; SELECT * FROM savings_goals WHERE userId = $userId\", {\n            userId\n        });\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async updateSavingsGoal(goalId, goalData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; UPDATE savings_goals SET * = $goalData WHERE id = $goalId\", {\n            goalId,\n            goalData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async deleteSavingsGoal(goalId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; DELETE savings_goals WHERE id = $goalId\", {\n            goalId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    // Budget limits operations\n    async createBudgetLimit(limitData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; CREATE budget_limits CONTENT $limitData\", {\n            limitData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async getBudgetLimits(userId) {\n        var _result_;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; SELECT * FROM budget_limits WHERE userId = $userId\", {\n            userId\n        });\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async updateBudgetLimit(limitId, limitData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; UPDATE budget_limits SET * = $limitData WHERE id = $limitId\", {\n            limitId,\n            limitData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async deleteBudgetLimit(limitId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; DELETE budget_limits WHERE id = $limitId\", {\n            limitId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    // Insights operations\n    async createInsight(insightData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; CREATE insights CONTENT $insightData\", {\n            insightData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async getInsights(userId) {\n        var _result_;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; SELECT * FROM insights WHERE userId = $userId ORDER BY createdAt DESC\", {\n            userId\n        });\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async markInsightAsRead(insightId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; UPDATE insights SET isRead = true WHERE id = $insightId\", {\n            insightId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    // Alerts operations\n    async createAlert(alertData) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; CREATE alerts CONTENT $alertData\", {\n            alertData\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async getAlerts(userId) {\n        var _result_;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; SELECT * FROM alerts WHERE userId = $userId ORDER BY createdAt DESC\", {\n            userId\n        });\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async markAlertAsRead(alertId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; UPDATE alerts SET isRead = true WHERE id = $alertId\", {\n            alertId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    async deleteAlert(alertId) {\n        var _result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"USE NS rupee DB finance; DELETE alerts WHERE id = $alertId\", {\n            alertId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : _result_[0]) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : _result__result[0]);\n    }\n    // Analytics queries\n    async getMonthlyExpenses(userId, year, month) {\n        var _result_;\n        await this.connect();\n        const result = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      SELECT * FROM expenses \\n      WHERE userId = $userId \\n      AND time::year(date) = $year \\n      AND time::month(date) = $month\\n      ORDER BY date DESC\\n    \", {\n            userId,\n            year,\n            month\n        });\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async getExpensesByCategory(userId, startDate, endDate) {\n        var _result_;\n        await this.connect();\n        const result = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      SELECT categoryId, sum(amount) as total \\n      FROM expenses \\n      WHERE userId = $userId \\n      AND date >= $startDate \\n      AND date <= $endDate\\n      GROUP BY categoryId\\n    \", {\n            userId,\n            startDate,\n            endDate\n        });\n        return result[1] || ((_result_ = result[0]) === null || _result_ === void 0 ? void 0 : _result_.result) || [];\n    }\n    async getTotalSavings(userId) {\n        var _result__, _result_, _result__result_, _result__result, _result_1;\n        await this.connect();\n        const result = await this.db.query(\"\\n      USE NS rupee DB finance;\\n      SELECT sum(currentAmount) as total \\n      FROM savings_goals \\n      WHERE userId = $userId\\n    \", {\n            userId\n        });\n        return ((_result_ = result[1]) === null || _result_ === void 0 ? void 0 : (_result__ = _result_[0]) === null || _result__ === void 0 ? void 0 : _result__.total) || ((_result_1 = result[0]) === null || _result_1 === void 0 ? void 0 : (_result__result = _result_1.result) === null || _result__result === void 0 ? void 0 : (_result__result_ = _result__result[0]) === null || _result__result_ === void 0 ? void 0 : _result__result_.total) || 0;\n    }\n    constructor(){\n        this.isConnected = false;\n        this.db = new surrealdb__WEBPACK_IMPORTED_MODULE_0__.Surreal();\n    }\n}\nconst surrealDB = SurrealDBService.getInstance();\n/* harmony default export */ __webpack_exports__[\"default\"] = (surrealDB);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/surrealdb.ts\n"));

/***/ })

});